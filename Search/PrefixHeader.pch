//
//  PrefixHeader.pch
//  Search
//
//  Created by Jobs on 2020/7/31.
//  Copyright © 2020 Jobs. All rights reserved.
//

#ifndef PrefixHeader_pch
#define PrefixHeader_pch

#import "AABlock.h"
#import <Masonry/Masonry.h>
#import <IQKeyboardManager/IQKeyboardManager.h>

#import "NSObject+Extras.h"
#import "NSObject+Time.h"
#import "NSObject+Measure.h"
#import "NSObject+Sound.h"
#import "NSObject+Shake.h"
#import "NSObject+Random.h"
#import "NSObject+SYSAlertController.h"
#import "NSObject+SPAlertController.h"
#import "NSObject+OpenURL.h"

#import "NSString+Extras.h"

#import "UIView+Extras.h"
#import "UIView+Chain.h"
#import "UIView+SuspendView.h"
#import "UIView+Measure.h"
#import "UIView+Animation.h"
#import "UIView+Gradient.h"
#import "UIView+Rotate.h"

#import "UIImageView+GIF.h"//UIImageView支持GIF动画 https://github.com/pupboss/UIImageView-GIF
#import "UIImage+YBGIF.h"
#import "UIImage+Extras.h"
#import "UIImage+SYS.h"
#import "UIImage+Overlay.h"
#import "UIImage+Tailor.h"
#import "LoadingImage.h"

#import "AFNetworking.h"
#import <ReactiveObjC.h>
#import "TZImagePickerController.h"
#import "MJExtension.h"
#import "MJRefresh.h"
#import "GKNavigationBar.h"
#import "JXCategoryView.h"
#import "ECAuthorizationTools.h"
#import "SDWebImage-umbrella.h"//不支持图片后处理
#import "SPAlertController.h"
#import "SceneDelegate.h"
#import "WHToast-umbrella.h"
#import "BRPickerView.h"
#import "UIControl+XY.h"
#import "JPImageresizerView-umbrella.h"
#import "FileFolderHandleTool.h"
#import "UIButton+ImageTitleSpacing.h"
#import <LYEmptyView/LYEmptyViewHeader.h>
#import "YYKit.h"
#import <TXFileOperation.h>
#import "TZImagePickerController.h"

#import "BaseVC.h"
#import "BaseVC+TZImagePickerController.h"
#import "BaseVC+MJRefresh.h"
#import "BaseVC+AFNReachability.h"
#import "BaseVC+BackBtn.h"
#import "BaseVC+JXCategoryListContentViewDelegate.h"
#import "BaseVC+BRPickerView.h"
#import "BaseVC+GifImageView.h"
#import "BaseVC+JPImageresizerView.h"
#import "BaseVC+BWShareView.h"

#import "ViewController.h"
#import "SearchVC.h"

#import "MonitorNetwoking.h"

//警告处理⚠️
#define SuppressPerformSelectorLeakWarning(Stuff) \
    do { \
        _Pragma("clang diagnostic push") \
        _Pragma("clang diagnostic ignored \"-Warc-performSelector-leaks\"") \
        Stuff; \
        _Pragma("clang diagnostic pop") \
} while (0)

//#pragma clang diagnostic push
//#pragma clang diagnostic ignored "-Wundeclared-selector"
//#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
//#pragma clang diagnostic ignored "-Wincomplete-implementation"
//#pragma clang diagnostic ignored "-Wdeprecated-declarations"
//#pragma clang diagnostic ignored "-Warc-performSelector-leaks" [targetVC performSelector:NSSelectorFromString([NSString ensureNonnullString:alertBtnActionArr[i] ReplaceStr:@"defaultFunc"]) withObject:Nil];
//#pragma clang diagnostic pop

#pragma mark ======================================== UserDefault ========================================
#define SetUserDefaultKeyWithValue(key,value) [[NSUserDefaults standardUserDefaults] setValue:value forKey:key]
#define SetUserDefaultKeyWithObject(key,object) [[NSUserDefaults standardUserDefaults] setObject:object forKey:key]
#define SetUserBoolKeyWithObject(key,object) [[NSUserDefaults standardUserDefaults] setBool:object forKey:key]
#define GetUserDefaultValueForKey(key) [[NSUserDefaults standardUserDefaults] valueForKey:key]
#define GetUserDefaultObjForKey(key) [[NSUserDefaults standardUserDefaults] objectForKey:key]
#define GetUserDefaultBoolForKey(key) [[NSUserDefaults standardUserDefaults] boolForKey:key]
#define DeleUserDefaultWithKey(key) [[NSUserDefaults standardUserDefaults] removeObjectForKey:key]
#define UserDefaultSynchronize  [[NSUserDefaults standardUserDefaults] synchronize]

#pragma mark ======================================== Sys.========================================
#define HDAppVersion [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"]//标识应用程序的发布版本号
#define HDAppBuildVersion [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleVersion"]//APP BUILD 版本号
#define HDAppDisplayName [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleExecutable"]// APP名字
#define HDLocalLanguage [[NSLocale currentLocale] objectForKey:NSLocaleLanguageCode]//当前语言
#define HDLocalCountry [[NSLocale currentLocale] objectForKey:NSLocaleCountryCode]//当前国家
#define HDDevice [UIDevice currentDevice]
#define HDDeviceName HDDevice.name                           // 设备名称
#define HDDeviceModel HDDevice.model                         // 设备类型
#define HDDeviceLocalizedModel HDDevice.localizedModel       // 本地化模式
#define HDDeviceSystemName HDDevice.systemName               // 系统名字
#define HDDeviceSystemVersion HDDevice.systemVersion         // 系统版本
#define HDDeviceOrientation HDDevice.orientation             // 设备朝向
#define CURRENTLANGUAGE ([[NSLocale preferredLanguages] objectAtIndex:0])// 当前语言
#define UDID HDDevice.identifierForVendor.UUIDString // UUID // 使用苹果不让上传App Store!!!
#define HDiPhone ([HDDeviceModel rangeOfString:@"iPhone"].length > 0)
#define HDiPod ([HDDeviceModel rangeOfString:@"iPod"].length > 0)
#define isPad (HDDevice.userInterfaceIdiom == UIUserInterfaceIdiomPad)// 是否iPad
#define isiPhone (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)//是否iPhone
#define isRetina ([[UIScreen mainScreen] scale] >= 2.0)// 非Retain屏幕 1.0

#define isiPhoneX       (((kScreenHeight  == 812.0) || (kScreenHeight  == 896.0) || (kScreenHeight  == 852.0)) ? 1 : 0)
#define isiPhoneXR__XMax      ((kScreenHeight  == 896.0) ? 1 : 0)

#define WeakSelf __weak typeof(self) weakSelf = self;
#define StrongSelf __strong typeof(self) strongSelf = self;
#define StringFormat(format,...) [NSString stringWithFormat:format, ##__VA_ARGS__]

#define ReuseIdentifier NSStringFromClass ([self class])

#ifndef SCREEN_BOUNDS
#define SCREEN_BOUNDS [UIScreen mainScreen].bounds
#endif
#ifndef SCREEN_WIDTH
#define SCREEN_WIDTH [UIScreen mainScreen].bounds.size.width
#endif
#ifndef SCREEN_HEIGHT
#define SCREEN_HEIGHT [UIScreen mainScreen].bounds.size.height
#endif

///随机颜色
#define RandomColor [UIColor colorWithRed:arc4random_uniform(256) / 255.0 \
green:arc4random_uniform(256) / 255.0 \
blue:arc4random_uniform(256) / 255.0 \
alpha:1] \

#define RGBCOLOR(r,g,b)  [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:1]
#define COLOR_RGB(r,g,b,a)  [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:a]
#define HEXCOLOR(hexValue)  [UIColor colorWithRed:((float)((hexValue & 0xFF0000) >> 16))/255.0 green:((float)((hexValue & 0xFF00) >> 8))/255.0 blue:((float)(hexValue & 0xFF))/255.0 alpha:1]
#define COLOR_HEX(hexValue, al)  [UIColor colorWithRed:((float)((hexValue & 0xFF0000) >> 16))/255.0 green:((float)((hexValue & 0xFF00) >> 8))/255.0 blue:((float)(hexValue & 0xFF))/255.0 alpha:al]
#define MianScreen          UIScreen.mainScreen.bounds.size
#define Device_Width        MianScreen.width//获取屏幕宽高
#define SCALING_RATIO(UISize) (UISize) * Device_Width / 375.0f//全局比例尺
///常见颜色
#define kClearColor     [UIColor clearColor]
#define kBlackColor     [UIColor blackColor]
#define kBlueColor      [UIColor blueColor]
#define kWhiteColor     [UIColor whiteColor]
#define kCyanColor      [UIColor cyanColor]
#define kGrayColor      [UIColor grayColor]
#define kOrangeColor    [UIColor orangeColor]
#define kRedColor       [UIColor redColor]
#define KBrownColor     [UIColor brownColor]
#define KDarkGrayColor  [UIColor darkGrayColor]
#define KDarkTextColor  [UIColor darkTextColor]
#define KYellowColor    [UIColor yellowColor]
#define KPurpleColor    [UIColor purpleColor]
#define KLightTextColor [UIColor lightTextColor]
#define KLightGrayColor [UIColor lightGrayColor]
#define KGreenColor     [UIColor greenColor]
#define KMagentaColor   [UIColor magentaColor]

static inline UIWindow *getMainWindow(){
  UIWindow *window = nil;
   window = UIApplication.sharedApplication.delegate.window;
   if (!window) {
       if (@available(iOS 13.0, *)) {
           NSSet<UIScene *> *connectedScenes =  UIApplication.sharedApplication.connectedScenes;
           if (connectedScenes.count > 0 ) {
               UIWindowScene *scene = (UIWindowScene *)connectedScenes.anyObject;
                window = scene.windows.firstObject;
           }
       }
   }return window;
}
static inline BOOL isiPhoneX_series() {
    BOOL iPhoneXSeries = NO;
    if (UIDevice.currentDevice.userInterfaceIdiom != UIUserInterfaceIdiomPhone) {
        return iPhoneXSeries;
    }

    if (@available(iOS 11.0, *)) {
        UIWindow *mainWindow = getMainWindow();
        if (mainWindow.safeAreaInsets.bottom > 0.0) {
            iPhoneXSeries = YES;
        }
    }return iPhoneXSeries;
}

///系统控件高度
static inline id getSceneDelegate(){
    id sceneDelegate = nil;
    
    if (@available(iOS 13.0, *)) {
        sceneDelegate = UIApplication.sharedApplication.connectedScenes.allObjects.firstObject.delegate;
    }return sceneDelegate;
}

static inline CGFloat rectOfStatusbar(){
#pragma clang diagnostic push
#pragma clang diagnostic ignored"-Wdeprecated-declarations"
    CGFloat RectOfStatusbar = 0.0f;
    if (@available(iOS 13.0, *)){
        id WINDOW = UIApplication.sharedApplication.windows.firstObject;
        if ([WINDOW isKindOfClass:UIWindow.class]) {
            UIWindow *window = (UIWindow *)WINDOW;
            UIWindowScene *windowScene = window.windowScene;
            UIStatusBarManager *statusBarManager = windowScene.statusBarManager;
            if (statusBarManager.statusBarHidden == NO) {
                RectOfStatusbar = statusBarManager.statusBarFrame.size.height;
//                statusBarManager.statusBarFrame.mj_h
            }else{}
        }
    }else{
        RectOfStatusbar = UIApplication.sharedApplication.statusBarFrame.size.height;
    }return RectOfStatusbar;
#pragma clang diagnostic pop
}

/** DEBUG LOG **/
#ifdef DEBUG

#define DLog( s, ... ) NSLog( @"< %@:(%d) > %@", [[NSString stringWithUTF8String:__FILE__] lastPathComponent], __LINE__, [NSString stringWithFormat:(s), ##__VA_ARGS__] )

#else

#define DLog( s, ... )

#endif

#endif /* PrefixHeader_pch */
